/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mcd;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JTextArea;

/**
 * Programa: Este programa calcula el mcd de cierta cantidad de números autor:
 * Oscar Rojas
 */
public class MCD extends javax.swing.JFrame {

    private int organizador = 0;
    private ArrayList<String> num = new ArrayList<>();
    private ArrayList<String> numC = new ArrayList<>();
    private ArrayList<Boolean> numCB = new ArrayList<>();
    private ArrayList<String> num1 = new ArrayList<>();
    private ArrayList<String> num2 = new ArrayList<>();
    private ArrayList<String> num3 = new ArrayList<>();
    private ArrayList<String> num4 = new ArrayList<>();

    //elemento de la ventana de solución
    private javax.swing.JFrame ventanaSolucion;
    private javax.swing.JPanel panel3;
    private javax.swing.JTextArea textSolucion;

    //elementos de la ventana de error
    private javax.swing.JFrame ventanaError;
    private javax.swing.JPanel panel2;
    private javax.swing.JLabel textError;

    /**
     * Creates new form MCD
     */
    public MCD() {
        //inicia la ventana inicial
        initComponents();
        precomponentes();

        //ejemplo
        ejemplo();
    }

    private void ejemplo() {
        organizador = 1;
        paint();
        organizador = 2;
        paint();
        textNum1.setText("49");
        textNum2.setText("56");
        textNum3.setText("5");
        textNum4.setText("28");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        textNum1 = new javax.swing.JTextField();
        textNum2 = new javax.swing.JTextField();
        textNum3 = new javax.swing.JTextField();
        textNum4 = new javax.swing.JTextField();
        textNum8 = new javax.swing.JTextField();
        textNum7 = new javax.swing.JTextField();
        textNum6 = new javax.swing.JTextField();
        textNum5 = new javax.swing.JTextField();
        textNum9 = new javax.swing.JTextField();
        textNum10 = new javax.swing.JTextField();
        botonAdd = new javax.swing.JButton();
        botonRemove = new javax.swing.JButton();
        botonListo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(530, 171));
        setResizable(false);
        setSize(new java.awt.Dimension(530, 171));

        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("Minimo Común Divisor");

        textNum1.setText("Ingrese un número");

        textNum2.setText("Ingrese un número");

        textNum3.setText("Ingrese un número");

        textNum4.setText("Ingrese un número");

        textNum8.setText("Ingrese un número");

        textNum7.setText("Ingrese un número");

        textNum6.setText("Ingrese un número");

        textNum5.setText("Ingrese un número");

        textNum9.setText("Ingrese un número");

        textNum10.setText("Ingrese un número");

        botonAdd.setText("+");
        botonAdd.setPreferredSize(new java.awt.Dimension(40, 30));
        botonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddActionPerformed(evt);
            }
        });

        botonRemove.setText("-");
        botonRemove.setPreferredSize(new java.awt.Dimension(40, 30));
        botonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRemoveActionPerformed(evt);
            }
        });

        botonListo.setText("=");
        botonListo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(textNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(textNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(textNum9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNum10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonListo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textNum1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNum6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNum7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNum8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonListo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textNum9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textNum10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddActionPerformed
        // TODO add your handling code here:
        if (organizador == 8) {
            paint();
        } else {
            organizador++;
            paint();
        }
    }//GEN-LAST:event_botonAddActionPerformed

    private void botonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRemoveActionPerformed
        // TODO add your handling code here:
        if (organizador == 0) {
            paint();
        } else {
            organizador--;
            paint();
        }

    }//GEN-LAST:event_botonRemoveActionPerformed

    private void botonListoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListoActionPerformed
        // TODO add your handling code here:
        proceso();
    }//GEN-LAST:event_botonListoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MCD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MCD().setVisible(true);
        });
    }

    private void proceso() {
        switch (organizador) {
            case 0:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 1:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 2:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 3:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText()) || "Ingrese un número".equals(textNum5.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText()) || "0".equals(textNum5.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    num.add(textNum5.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 4:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText()) || "Ingrese un número".equals(textNum5.getText()) || "Ingrese un número".equals(textNum6.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText()) || "0".equals(textNum5.getText()) || "0".equals(textNum6.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    num.add(textNum5.getText());
                    num.add(textNum6.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 5:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText()) || "Ingrese un número".equals(textNum5.getText()) || "Ingrese un número".equals(textNum6.getText()) || "Ingrese un número".equals(textNum7.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText()) || "0".equals(textNum5.getText()) || "0".equals(textNum6.getText()) || "0".equals(textNum7.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    num.add(textNum5.getText());
                    num.add(textNum6.getText());
                    num.add(textNum7.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 6:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText()) || "Ingrese un número".equals(textNum5.getText()) || "Ingrese un número".equals(textNum6.getText()) || "Ingrese un número".equals(textNum7.getText()) || "Ingrese un número".equals(textNum8.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText()) || "0".equals(textNum5.getText()) || "0".equals(textNum6.getText()) || "0".equals(textNum7.getText()) || "0".equals(textNum8.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    num.add(textNum5.getText());
                    num.add(textNum6.getText());
                    num.add(textNum7.getText());
                    num.add(textNum8.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 7:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText()) || "Ingrese un número".equals(textNum5.getText()) || "Ingrese un número".equals(textNum6.getText()) || "Ingrese un número".equals(textNum7.getText()) || "Ingrese un número".equals(textNum8.getText()) || "Ingrese un número".equals(textNum9.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText()) || "0".equals(textNum5.getText()) || "0".equals(textNum6.getText()) || "0".equals(textNum7.getText()) || "0".equals(textNum8.getText()) || "0".equals(textNum9.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    num.add(textNum5.getText());
                    num.add(textNum6.getText());
                    num.add(textNum7.getText());
                    num.add(textNum8.getText());
                    num.add(textNum9.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
            case 8:
                if ("Ingrese un número".equals(textNum1.getText()) || "Ingrese un número".equals(textNum2.getText()) || "Ingrese un número".equals(textNum3.getText()) || "Ingrese un número".equals(textNum4.getText()) || "Ingrese un número".equals(textNum5.getText()) || "Ingrese un número".equals(textNum6.getText()) || "Ingrese un número".equals(textNum7.getText()) || "Ingrese un número".equals(textNum8.getText()) || "Ingrese un número".equals(textNum9.getText()) || "Ingrese un número".equals(textNum10.getText())) {
                    error();
                } else if ("0".equals(textNum1.getText()) || "0".equals(textNum2.getText()) || "0".equals(textNum3.getText()) || "0".equals(textNum4.getText()) || "0".equals(textNum5.getText()) || "0".equals(textNum6.getText()) || "0".equals(textNum7.getText()) || "0".equals(textNum8.getText()) || "0".equals(textNum9.getText()) || "0".equals(textNum10.getText())) {
                    error2();
                } else {
                    ventanaSolucion.setVisible(true);
                    limpiar();
                    num.add(textNum1.getText());
                    num.add(textNum2.getText());
                    num.add(textNum3.getText());
                    num.add(textNum4.getText());
                    num.add(textNum5.getText());
                    num.add(textNum6.getText());
                    num.add(textNum7.getText());
                    num.add(textNum8.getText());
                    num.add(textNum9.getText());
                    num.add(textNum10.getText());
                    textSolucion.setText("MCD de ");
                    ordenar();
                    int s = solucion();
                    textSolucion.setText(textSolucion.getText() + "MCD = " + s);
                    combinacion(s);
                }
                break;
        }
    }

    private void ordenar() {
        String aux;
        for (int j = 1; j <= num.size(); j++) {
            for (int i = num.size() - 1; i > 0; i--) {
                int a = i - 1;
                if (Integer.parseInt(num.get(i)) < Integer.parseInt(num.get(a))) {
                    aux = num.get(i);
                    num.set(i, num.get(a));
                    num.set(a, aux);
                }
            }
        }
    }

    private int solucion() {
        for (int i = 0; i < num.size(); i++) {
            numC.add(num.get(i));
            numCB.add(false);
            if (i == num.size() - 1) {
                textSolucion.setText(textSolucion.getText() + Integer.parseInt(num.get(i)) + ": \n");
            } else {
                textSolucion.setText(textSolucion.getText() + Integer.parseInt(num.get(i)) + ", ");
            }
        }
        for (int a = num.size() - 1; a > 0; a--) {
            int i = a - 1;
            int j = a;
            int primero = Integer.parseInt(num.get(i));
            int segundo = Integer.parseInt(num.get(j));
            do {
                if (primero < segundo) {
                    textSolucion.setText(textSolucion.getText() + segundo + " = " + primero + " * " + segundo / primero + " + " + segundo % primero + " \n");
                    this.num1.add(Integer.toString(segundo));
                    this.num2.add(Integer.toString(primero));
                    this.num3.add(Integer.toString(segundo / primero));
                    this.num4.add(Integer.toString(segundo % primero));
                    if (segundo % primero == 0) {
                        if (i == 0) {
                            return primero;
                        } else {
                            num.set(i, Integer.toString(primero));
                        }
                    } else {
                        num.set(i, Integer.toString(solucion(primero, segundo % primero)));
                        if (i == 0) {
                            return Integer.parseInt(num.get(i));
                        }
                    }
                } else if (primero > segundo) {
                    textSolucion.setText(textSolucion.getText() + primero + " = " + segundo + " * " + primero / segundo + " + " + primero % segundo + " \n");
                    this.num1.add(Integer.toString(primero));
                    this.num2.add(Integer.toString(segundo));
                    this.num3.add(Integer.toString(primero / segundo));
                    this.num4.add(Integer.toString(primero % segundo));
                    if (primero % segundo == 0) {
                        if (i == 0) {
                            return segundo;
                        } else {
                            num.set(i, Integer.toString(segundo));
                        }
                    } else {
                        num.set(i, Integer.toString(solucion(segundo, primero % segundo)));
                        if (i == 0) {
                            return Integer.parseInt(num.get(i));
                        }
                    }
                }
            } while (segundo % primero == 0);
        }
        return 1;
    }

    private int solucion(int primero, int segundo) {
        if (primero > segundo) {
            textSolucion.setText(textSolucion.getText() + primero + " = " + segundo + " * " + primero / segundo + " + " + primero % segundo + " \n");
            this.num1.add(Integer.toString(primero));
            this.num2.add(Integer.toString(segundo));
            this.num3.add(Integer.toString(primero / segundo));
            this.num4.add(Integer.toString(primero % segundo));
            if (primero % segundo == 0) {
                return segundo;
            } else {
                return solucion(segundo, primero % segundo);
            }
        } else if (primero < segundo) {
            textSolucion.setText(textSolucion.getText() + segundo + " = " + primero + " * " + segundo / primero + " + " + segundo % primero + " \n");
            this.num1.add(Integer.toString(segundo));
            this.num2.add(Integer.toString(primero));
            this.num3.add(Integer.toString(segundo / primero));
            this.num4.add(Integer.toString(segundo % primero));
            if (segundo % primero == 0) {
                return primero;
            } else {
                return solucion(primero, segundo % primero);
            }
        }
        return 1;
    }

    private void combinacion(int mcd) {
        int i = num4.size() - 1;
        while (mcd != Integer.parseInt(num4.get(i))) {
            i--;
        }
        //agregar la convinancion lineal al texto
        textSolucion.setText(textSolucion.getText() + "\n *** convinación lineal *** \n");
        if (Integer.parseInt(num3.get(i)) == 1) {
            textSolucion.setText(textSolucion.getText() + mcd + " = " + num1.get(i) + " - " + num2.get(i));
            num1.set(i, comprobar("\n" + mcd + " = ", num1.get(i), " - (" + num2.get(i) + ")"));
            num2.set(i, comprobar("\n" + mcd + " = " + num1.get(i) + " - (", num2.get(i), ")"));
        } else {
            textSolucion.setText(textSolucion.getText() + mcd + " = " + num1.get(i) + " - (" + num2.get(i) + " *(" + num3.get(i) + "))");
            num1.set(i, comprobar("\n" + mcd + " = ", num1.get(i), " - (" + num2.get(i) + " *(" + num3.get(i) + "))"));
            num2.set(i, comprobar("\n" + mcd + " = " + num1.get(i) + " - (", num2.get(i), " *(" + num3.get(i) + "))"));
        }
        System.out.println(numC.size() + " " + numCB.size());
        for (int j = 0; j < numC.size(); j++) {
            if (!numCB.get(j)) {
                textSolucion.setText(textSolucion.getText() + " + " + numC.get(j) + " * (0)");
            }
        }
    }

    private String comprobar(String antes, String numero, String despues) {
        boolean cam_num = true;
        for (int j = 0; j < numC.size(); j++) {
            if (Integer.parseInt(numero) == Integer.parseInt(numC.get(j))) {
                cam_num = false;
                numCB.set(j, true);
            }
        }
        if (cam_num) {
            int i = num4.size() - 1;
            while (Integer.parseInt(numero) != Integer.parseInt(num4.get(i))) {
                i--;
            }
            if (Integer.parseInt(num3.get(i)) == 1) {
                textSolucion.setText(textSolucion.getText() + antes + "( " + num1.get(i) + " - " + num2.get(i) + ")" + despues);
                num1.set(i, comprobar(antes + "( ", num1.get(i), " - ( " + num2.get(i) + "))" + despues));
            num2.set(i, comprobar(antes + "( " + num1.get(i) + " - ( ", num2.get(i), "))" + despues));
            } else {
                textSolucion.setText(textSolucion.getText() + antes + "( " + num1.get(i) + " - ( " + num2.get(i) + " * (" + num3.get(i) + ")))" + despues);
                num1.set(i, comprobar(antes + "( ", num1.get(i), " - ( " + num2.get(i) + " * (" + num3.get(i) + ")))" + despues));
            num2.set(i, comprobar(antes + "( " + num1.get(i) + " - ( ", num2.get(i), " * (" + num3.get(i) + ")))" + despues));
            }
            return numero;
        } else {
            return numero;
        }
    }

    private void error() {
        textError.setText("Error: debe ingresar números en todas las casillas");
        ventanaError.setVisible(true);
        ventanaError.add(panel2);
    }

    private void error2() {
        textError.setText("Error: no ingrese números menores o iguales a 0");
        ventanaError.setVisible(true);
        ventanaError.add(panel2);
    }

    private void paint() {
        switch (organizador) {
            case 1:
                panel.add(textNum3);
                panel.add(botonRemove);
                panel.remove(textNum4);
                botonAdd.setLocation(textNum3.getX() + 125, textNum3.getY());
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 2:
                panel.add(textNum4);
                panel.remove(textNum5);
                botonAdd.setLocation(textNum1.getX(), textNum1.getY() + 35);
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 3:
                panel.add(textNum5);
                panel.remove(textNum6);
                botonAdd.setLocation(textNum5.getX() + 125, textNum5.getY());
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 4:
                panel.add(textNum6);
                panel.remove(textNum7);
                botonAdd.setLocation(textNum6.getX() + 125, textNum6.getY());
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 5:
                panel.add(textNum7);
                panel.remove(textNum8);
                botonAdd.setLocation(textNum7.getX() + 125, textNum7.getY());
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 6:
                panel.add(textNum8);
                panel.remove(textNum9);
                botonAdd.setLocation(textNum5.getX(), textNum5.getY() + 35);
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 7:
                panel.add(textNum9);
                panel.remove(textNum10);
                panel.add(botonAdd);
                botonAdd.setLocation(textNum9.getX() + 125, textNum9.getY());
                botonRemove.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 8:
                panel.add(textNum10);
                panel.remove(botonAdd);
                botonRemove.setLocation(textNum10.getX() + 125, textNum10.getY());
                botonListo.setLocation(botonRemove.getX() + 45, botonRemove.getY());
                break;
            case 0:
                panel.remove(botonRemove);
                panel.remove(textNum3);
                botonAdd.setLocation(textNum2.getX() + 125, textNum2.getY());
                botonListo.setLocation(botonAdd.getX() + 45, botonAdd.getY());
                break;
        }
    }

    private void limpiar() {
        this.num.clear();
        this.numC.clear();
        this.numCB.clear();
        this.num1.clear();
        this.num2.clear();
        this.num3.clear();
        this.num4.clear();
    }

    private void setTransparencia(JTextArea area) {// modifica un area de texto para que sea transparente
        area.setOpaque(false);
        area.setBackground(new Color(0, 0, 0, 0));
        area.setBorder(BorderFactory.createEmptyBorder());
    }

    private void precomponentes() {
        //inicia los parametros de la ventana de error
        ventanaError = new javax.swing.JFrame("ERROR");
        ventanaError.setBounds(60, 60, 500, 100);
        ventanaError.setResizable(false);
        panel2 = new javax.swing.JPanel();
        panel2.setBounds(0, 0, 100, 100);
        textError = new javax.swing.JLabel();
        panel2.add(textError);

        //inicia la ventana de la solución
        ventanaSolucion = new javax.swing.JFrame("Solución");
        ventanaSolucion.setBounds(60, 60, 300, 700);
        panel3 = new javax.swing.JPanel();
        panel3.setBounds(0, 0, 500, 700);
        ventanaSolucion.add(panel3);
        textSolucion = new javax.swing.JTextArea();
        textSolucion.setEditable(false);
        setTransparencia(textSolucion);
        panel3.add(textSolucion);

        panel.remove(textNum4);
        panel.remove(textNum5);
        panel.remove(textNum6);
        panel.remove(textNum7);
        panel.remove(textNum8);
        panel.remove(textNum9);
        panel.remove(textNum10);
        paint();

        //interfaz
        this.setTitle("calculadora M.C.D. by Oscar Rojas");
        this.setBackground(Color.yellow);
        panel.setBackground(Color.yellow);
        panel2.setBackground(Color.red);
        panel3.setBackground(Color.green);

        //excepsiones
        textNum1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum2.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum3.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum4.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum5.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum6.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum7.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum8.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum9.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
        textNum10.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
                    e.consume();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAdd;
    private javax.swing.JButton botonListo;
    private javax.swing.JButton botonRemove;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField textNum1;
    private javax.swing.JTextField textNum10;
    private javax.swing.JTextField textNum2;
    private javax.swing.JTextField textNum3;
    private javax.swing.JTextField textNum4;
    private javax.swing.JTextField textNum5;
    private javax.swing.JTextField textNum6;
    private javax.swing.JTextField textNum7;
    private javax.swing.JTextField textNum8;
    private javax.swing.JTextField textNum9;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
